version: "3.8"

services:
  gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    command: yarn run start:dev api-gateway
    ports:
      - "3000:3000"
    env_file:
      - ./apps/api-gateway/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
  chat:
    build:
      context: .
      dockerfile: ./apps/chat/Dockerfile
    command: yarn run start:dev chat
    env_file:
      - ./apps/chat/.env
    depends_on:
      mongo_chat:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
  user:
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
    command: yarn run start:dev user
    depends_on:
      postgres_user:
        condition: service_healthy
    env_file:
      - ./apps/user/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
  postgres_user:
    image: postgres:16
    env_file:
      - ./apps/user/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "6001:5432"
    volumes:
      - ./database/postgres/user:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
#      start_period: 10s
  mongo_chat:
    image: mongo:latest
#    environment:
#      MONGO_USER: ${MONGO_USER}
#      MONGO_PASSWORD: ${MONGO_PASSWORD}
#      MONGO_DB: ${MONGO_DB}
    env_file:
      - ./apps/chat/.env
    ports:
      - "6002:27017"
    volumes:
      - ./database/mongoDB/data:/data/db
      - ./database/mongoDB/initdb.d:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 10
#      start_period: 10s

