syntax = "proto3";
package user;

service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc ParseBearerToken(ParseBearerTokenRequest) returns (ParseBearerTokenResponse);
  rpc HashPassword(HashPasswordRequest) returns (HashPasswordResponse);
  rpc SignUp(SignUpRequest) returns (SignUpResponse);
  //  rpc verifyToken(VerifyTokenRequest) returns (VerifyTokenResponse);
}

/*  enum */
enum TokenType {
  ACCESS = 0;
  REFRESH = 1;
}
enum UserRoleEnum {
  USER = 0;
  SUPER = 1;
}

message User {
  int32 id = 1;
  string email = 2;
  string username = 3;
  string password = 4;
  UserRoleEnum role = 5;
}


/*  func definition */
message HashPasswordRequest {
  string password = 1;
  optional string salt = 2;
}
message HashPasswordResponse {
  string hash = 1;
}
message SignUpRequest {
  string email = 1;
  string password = 2;
  string username = 3;
}

message SignUpResponse {
  int32 id = 1;
}
//message VerifyTokenRequest {
//  string token = 1;
//  optional TokenType type = 2;
//}
//message VerifyTokenResponse {
//  int32 sub = 1;
//  string email = 2;
//  UserRoleEnum role = 3;
//  TokenType type = 4;
//  int32 exp = 5;
//}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string accessToken = 1;
  string refreshToken = 2;
}

message ParseBearerTokenRequest {
  string token = 1;
  optional TokenType type = 2;
}

message ParseBearerTokenResponse {
  int32 sub = 1;
  string email = 2;
  UserRoleEnum role = 3;
  TokenType type = 4;
  int32 exp = 5;
}

service UserService {
  //  rpc SignUp(SingUpRequest) returns (SingUpResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc CheckUserByEmail(CheckUserByEmailRequest) returns (CheckUserByEmailResponse);
}

message GetUserRequest {
  int32 id = 1;
  optional UserRoleEnum role = 2;
}

message GetUserResponse {
  User user = 1;
}

message GetUsersRequest {
  optional int32 skip = 1;
  optional int32 take = 2;
}

message GetUsersResponse {
  repeated User users = 1;
  int32 total = 2;
}

message CheckUserByEmailRequest {
  string email = 1;
}

message CheckUserByEmailResponse {
  User user = 1;
}

message CreateUserRequest{
  string email = 1;
  string password = 2;
  string username = 3;
  optional UserRoleEnum role = 4;
}
message CreateUserResponse{
  User user = 1;
}