// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v5.29.1
// source: proto/user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = 'user';

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ParseBearerTokenRequest {
  accessToken: string;
  refreshToken: string;
}

export interface ParseBearerTokenResponse {
  sub: string;
}

export interface GetUserRequest {
  id: string;
}

export interface GetUserResponse {
  id: string;
  email: string;
  name: string;
}

export interface SingUpRequest {
  email: string;
  password: string;
  name: string;
}

export interface SingUpResponse {
  id: number;
}

export const USER_PACKAGE_NAME = 'user';

export interface AuthServiceClient {
  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  parseBearerToken(
    request: ParseBearerTokenRequest,
    metadata?: Metadata,
  ): Observable<ParseBearerTokenResponse>;
}

export interface AuthServiceController {
  login(
    request: LoginRequest,
    metadata?: Metadata,
  ): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  parseBearerToken(
    request: ParseBearerTokenRequest,
    metadata?: Metadata,
  ):
    | Promise<ParseBearerTokenResponse>
    | Observable<ParseBearerTokenResponse>
    | ParseBearerTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['login', 'parseBearerToken'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';

export interface UserServiceClient {
  signUp(
    request: SingUpRequest,
    metadata?: Metadata,
  ): Observable<SingUpResponse>;

  getUser(
    request: GetUserRequest,
    metadata?: Metadata,
  ): Observable<GetUserResponse>;
}

export interface UserServiceController {
  signUp(
    request: SingUpRequest,
    metadata?: Metadata,
  ): Promise<SingUpResponse> | Observable<SingUpResponse> | SingUpResponse;

  getUser(
    request: GetUserRequest,
    metadata?: Metadata,
  ): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['signUp', 'getUser'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
export const USER_PROTO_PATH = 'proto/user.proto';
